openapi: 3.0.3
info:
  title: Authentication and Authorization Service API
  description: |
    A comprehensive authentication and authorization service that provides secure user authentication,
    profile management, and role-based access control (RBAC) capabilities.
  version: 1.0.0
  contact:
    name: Auth Service Team
servers:
  - url: http://localhost:8000
    description: Development server
  - url: https://api.example.com
    description: Production server

security:
  - BearerAuth: []

tags:
  - name: Authentication
    description: User login, logout, and session management
  - name: Profile Management
    description: User profile retrieval and updates
  - name: Password Management
    description: Password reset and change operations
  - name: Role Management
    description: Role and permission management for administrators
  - name: User Administration
    description: User management for administrators

paths:
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user with username/email and password
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - identifier
                - password
              properties:
                identifier:
                  type: string
                  description: Username or email address
                  example: "user@example.com"
                password:
                  type: string
                  format: password
                  description: User password
                  example: "securePassword123"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    description: JWT access token
                    example: "eyJ0eXAiOiJKV1QiLCJhbGc..."
                  token_type:
                    type: string
                    example: "Bearer"
                  expires_in:
                    type: integer
                    description: Token expiration time in seconds
                    example: 3600
                  user:
                    $ref: '#/components/schemas/UserProfile'
        '400':
          $ref: '#/components/responses/BadRequest'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: User logout
      description: Invalidate current user session/token
      requestBody:
        required: false
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logout successful"
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/profile:
    get:
      tags:
        - Profile Management
      summary: Get current user profile
      description: Retrieve authenticated user's profile information
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          $ref: '#/components/responses/Unauthorized'

    put:
      tags:
        - Profile Management
      summary: Update current user profile
      description: Update authenticated user's profile information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileUpdate'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

    patch:
      tags:
        - Profile Management
      summary: Partially update current user profile
      description: Partially update authenticated user's profile information
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileUpdate'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/profiles:
    get:
      tags:
        - User Administration
      summary: List user profiles (Admin only)
      description: Retrieve paginated list of user profiles with filtering support
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: page_size
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: ordering
          in: query
          description: Field to order by
          schema:
            type: string
            enum: [email, created_at, -email, -created_at]
        - name: email
          in: query
          description: Filter by email
          schema:
            type: string
        - name: created_at
          in: query
          description: Filter by creation date
          schema:
            type: string
            format: date
      responses:
        '200':
          description: User profiles retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    description: Total number of users
                  next:
                    type: string
                    nullable: true
                    description: URL for next page
                  previous:
                    type: string
                    nullable: true
                    description: URL for previous page
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserProfile'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /auth/profiles/{id}:
    put:
      tags:
        - User Administration
      summary: Update user profile (Admin only)
      description: Update a specific user's profile
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileUpdate'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    patch:
      tags:
        - User Administration
      summary: Partially update user profile (Admin only)
      description: Partially update a specific user's profile
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileUpdate'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /auth/password-reset:
    post:
      tags:
        - Password Management
      summary: Request password reset
      description: Send password reset email (always returns 200 for security)
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  description: User's email address
                  example: "user@example.com"
      responses:
        '200':
          description: Password reset request processed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "If the email exists, a password reset link has been sent"

  /auth/password-reset/confirm:
    post:
      tags:
        - Password Management
      summary: Confirm password reset
      description: Reset password using valid reset token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - new_password
              properties:
                token:
                  type: string
                  description: Password reset token from email
                  example: "abc123def456"
                new_password:
                  type: string
                  format: password
                  description: New password
                  example: "newSecurePassword123"
      responses:
        '200':
          description: Password reset successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password reset successful"
        '400':
          $ref: '#/components/responses/BadRequest'

  /auth/change-password:
    post:
      tags:
        - Password Management
      summary: Change current password
      description: Change password for authenticated user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - current_password
                - new_password
              properties:
                current_password:
                  type: string
                  format: password
                  description: Current password
                  example: "currentPassword123"
                new_password:
                  type: string
                  format: password
                  description: New password
                  example: "newSecurePassword123"
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password changed successfully"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/user/roles:
    get:
      tags:
        - Role Management
      summary: Get current user's roles
      description: Retrieve roles assigned to the authenticated user
      responses:
        '200':
          description: User roles retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/user/permissions:
    get:
      tags:
        - Role Management
      summary: Get current user's permissions
      description: Retrieve effective permissions for the authenticated user
      responses:
        '200':
          description: User permissions retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Permission'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/roles:
    get:
      tags:
        - Role Management
      summary: List all roles (Admin only)
      description: Retrieve paginated list of all roles
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: page_size
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Roles retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                  next:
                    type: string
                    nullable: true
                  previous:
                    type: string
                    nullable: true
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Role'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

    post:
      tags:
        - Role Management
      summary: Create new role (Admin only)
      description: Create a new role in the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleCreate'
      responses:
        '201':
          description: Role created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /auth/roles/{id}:
    get:
      tags:
        - Role Management
      summary: Get role details (Admin only)
      description: Retrieve details of a specific role
      parameters:
        - name: id
          in: path
          required: true
          description: Role ID
          schema:
            type: integer
      responses:
        '200':
          description: Role retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - Role Management
      summary: Update role (Admin only)
      description: Update an existing role
      parameters:
        - name: id
          in: path
          required: true
          description: Role ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleCreate'
      responses:
        '200':
          description: Role updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - Role Management
      summary: Delete role (Admin only)
      description: Delete an existing role (if not assigned to users)
      parameters:
        - name: id
          in: path
          required: true
          description: Role ID
          schema:
            type: integer
      responses:
        '204':
          description: Role deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /auth/permissions:
    get:
      tags:
        - Role Management
      summary: List all permissions (Admin only)
      description: Retrieve paginated list of all permissions
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: page_size
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: Permissions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                  next:
                    type: string
                    nullable: true
                  previous:
                    type: string
                    nullable: true
                  results:
                    type: array
                    items:
                      $ref: '#/components/schemas/Permission'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

    post:
      tags:
        - Role Management
      summary: Create new permission (Admin only)
      description: Create a new permission in the system
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PermissionCreate'
      responses:
        '201':
          description: Permission created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permission'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /auth/permissions/{id}:
    get:
      tags:
        - Role Management
      summary: Get permission details (Admin only)
      description: Retrieve details of a specific permission
      parameters:
        - name: id
          in: path
          required: true
          description: Permission ID
          schema:
            type: integer
      responses:
        '200':
          description: Permission retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permission'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - Role Management
      summary: Update permission (Admin only)
      description: Update an existing permission
      parameters:
        - name: id
          in: path
          required: true
          description: Permission ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PermissionCreate'
      responses:
        '200':
          description: Permission updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Permission'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - Role Management
      summary: Delete permission (Admin only)
      description: Delete an existing permission (if not assigned to roles)
      parameters:
        - name: id
          in: path
          required: true
          description: Permission ID
          schema:
            type: integer
      responses:
        '204':
          description: Permission deleted successfully
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /auth/users/{id}/roles:
    post:
      tags:
        - User Administration
      summary: Assign roles to user (Admin only)
      description: Assign one or more roles to a specific user
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - role_ids
              properties:
                role_ids:
                  type: array
                  items:
                    type: integer
                  description: Array of role IDs to assign
                  example: [1, 2]
      responses:
        '200':
          description: Roles assigned successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - User Administration
      summary: Remove roles from user (Admin only)
      description: Remove one or more roles from a specific user
      parameters:
        - name: id
          in: path
          required: true
          description: User ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - role_ids
              properties:
                role_ids:
                  type: array
                  items:
                    type: integer
                  description: Array of role IDs to remove
                  example: [1, 2]
      responses:
        '200':
          description: Roles removed successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    UserProfile:
      type: object
      properties:
        id:
          type: integer
          description: User ID
          example: 1
        email:
          type: string
          format: email
          description: User email address
          example: "user@example.com"
        username:
          type: string
          description: Username
          example: "john_doe"
        first_name:
          type: string
          description: First name
          example: "John"
        last_name:
          type: string
          description: Last name
          example: "Doe"
        avatar_url:
          type: string
          format: uri
          nullable: true
          description: Avatar image URL
          example: "https://example.com/avatar.jpg"
        created_at:
          type: string
          format: date-time
          description: Account creation timestamp
          example: "2023-01-01T00:00:00Z"
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2023-01-01T00:00:00Z"
        roles:
          type: array
          items:
            type: string
          description: User role names
          example: ["ADMIN", "USER"]

    UserProfileUpdate:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User email address
          example: "user@example.com"
        first_name:
          type: string
          description: First name
          example: "John"
        last_name:
          type: string
          description: Last name
          example: "Doe"
        avatar_url:
          type: string
          format: uri
          nullable: true
          description: Avatar image URL
          example: "https://example.com/avatar.jpg"

    Role:
      type: object
      properties:
        id:
          type: integer
          description: Role ID
          example: 1
        name:
          type: string
          description: Role name
          example: "ADMIN"
        description:
          type: string
          description: Role description
          example: "Administrator with full system access"
        is_active:
          type: boolean
          description: Whether the role is active
          example: true
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2023-01-01T00:00:00Z"
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2023-01-01T00:00:00Z"

    RoleCreate:
      type: object
      required:
        - name
        - description
      properties:
        name:
          type: string
          description: Role name (must be unique)
          example: "ADMIN"
        description:
          type: string
          description: Role description
          example: "Administrator with full system access"
        is_active:
          type: boolean
          description: Whether the role is active
          default: true
          example: true

    Permission:
      type: object
      properties:
        id:
          type: integer
          description: Permission ID
          example: 1
        name:
          type: string
          description: Permission name
          example: "user.read"
        codename:
          type: string
          description: Permission codename (unique)
          example: "read_user"
        description:
          type: string
          description: Permission description
          example: "Can read user information"
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
          example: "2023-01-01T00:00:00Z"
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
          example: "2023-01-01T00:00:00Z"

    PermissionCreate:
      type: object
      required:
        - name
        - codename
        - description
      properties:
        name:
          type: string
          description: Permission name
          example: "user.read"
        codename:
          type: string
          description: Permission codename (must be unique)
          example: "read_user"
        description:
          type: string
          description: Permission description
          example: "Can read user information"

    Error:
      type: object
      properties:
        error:
          type: string
          description: Error type
          example: "invalid_request"
        message:
          type: string
          description: Error message
          example: "Invalid input provided"
        details:
          type: object
          description: Additional error details
          additionalProperties: true

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            invalid_request:
              summary: Invalid request
              value:
                error: "invalid_request"
                message: "Invalid input provided"
                details:
                  field_name: ["This field is required"]
            invalid_credentials:
              summary: Invalid credentials
              value:
                error: "invalid_credentials"
                message: "Invalid username or password"

    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "unauthorized"
            message: "Authentication credentials were not provided"

    Forbidden:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "forbidden"
            message: "You do not have permission to perform this action"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: "not_found"
            message: "The requested resources was not found"